#https://docs.vorondesign.com/community/howto/clee/sensorless_xy_homing.html
#https://www.klipper3d.org/TMC_Drivers.html#sensorless-homing

#.................................................................................................................
[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 3000
max_z_velocity: 15 
max_z_accel: 350
square_corner_velocity: 5.0

[exclude_object]
# Allows Klipper to exclude objects while a print is in progress

[virtual_sdcard]
path: ~/printer_data/gcodes

[display_status]
# For mainsail

[pause_resume]
# For mainsail

[respond]
default_type: echo

[idle_timeout]
timeout: 1800

[force_move]
enable_force_move: true



#.................................................................................................................
[probe]
# Voron-TAP_Probe on Huvud
pin: huvud:PB11
x_offset: 0
y_offset: 0
z_offset: -0.48
speed: 5.0
lift_speed: 5.0
samples: 4
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.010
samples_tolerance_retries: 5

# Active code follows that prevents probing bed with high nozzle temp, cutoff temp will be as defined by 'extruder_warm'
# setting in main printer.cfg file.
activate_gcode:
    {% set PROBE_TEMP = printer["gcode_macro _PRINT_VARIABLES"].extruder_warm|float %}
    {% set MAX_TEMP = PROBE_TEMP + 3 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M104 S{ PROBE_TEMP }
        _COOL_WAIT NZL_TEMP={ MAX_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            M104 S{ PROBE_TEMP }
            _COOL_WAIT NZL_TEMP={ MAX_TEMP }
        {% endif %}
    {% endif %}



#.................................................................................................................
[homing_override]
axes: xyz
gcode:
    STATUS_HOMING
    SET_NOZZLE_LEDS_ON
    {% set X_MID = printer.configfile.config["stepper_x"]["position_max"]|float / 2.0 %}
    {% set Y_MID = printer.configfile.config["stepper_y"]["position_max"]|float / 2.0 %}
    {% set MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_center|string %}
    {% set X_MeshCenter, Y_MeshCenter = MeshCenter.split(',')|map('trim')|map('int') %}
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    {% set Z_POS = printer.toolhead.position.z %}

#......Conditional Z-Hop
#      ! If the Z axis is not already homed, a full homed sequence will be run. If this is not desired, comment out the below line with !!!!!
#      The 'Safety On' line below crudely gets around the issue of a false homed state when either 'set_position_z: 0.0' or 'SET_KINEMATIC_POSITION Z=0'
#      The problem is that if either of these commands are issued, and the Z axis is not currently homed, it will now register as homed and potentially cause
#      issues with that false homed state later. Conditional flags could be set on the onset, saving which axes were already homed before using
#      'SET_KINEMATIC_POSITION Z=0' to then be followed by logic to execute M18 [AXIS that wasn't homed] to reflect the true state of things, but klipper
#      M18/M84 does not take axis flag - it's all or nothing.

    {% if "z" not in printer.toolhead.homed_axes %} ; Check if Z not already homed
        {% set home_all = 'Safety On' %} ; !!!!! THIS WILL HOME ALL AXIS IF Z IS NOT HOMED, COMMENT OUT IF THIS IS NOT DESIRED !!!!!
        SET_KINEMATIC_POSITION Z=0
        G0 Z10 F3600 ; Raise toolhead 10mm since unknown/not homed
      {% else %}
        {% if Z_POS < 10 %}
            G90
            G0 Z10 ; Make sure Z height is at least 10mm
          {% else %}
            G91
            G0 Z1 F3600 ; If Z was above 10mm, raise by 1mm for safety
            G90
        {% endif %}
    {% endif %} 


#......Sort X
    {% if home_all or 'X' in params %}
      _HOME_X
    {% endif %}
  
#......Sort Y
    {% if home_all or 'Y' in params %}
      _HOME_Y
    {% endif %}
  
#......Sort Z
    {% if home_all or 'Z' in params %}
      G90
      #......Sort Best Center to use, printer center or mesh center
      {% if X_MeshCenter > 0 and Y_MeshCenter > 0 %}
          G0 X{X_MeshCenter} Y{Y_MeshCenter} F4000
        {% else %}
          G0 X{X_MID} Y{Y_MID} F4000
      {% endif %} 
      #......Finally perfrom actual G28 Z
      G28 Z
      G1 Z10
    {% endif %}
    STATUS_READY
    SET_NOZZLE_LEDS_ON

#.................................................................................................................
[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

#.................................................................................................................
[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}    



#.................................................................................................................
[quad_gantry_level]
# Leveling code for XY rails that are controlled by Z steppers as in:
#
#                        TOP / Overhead View
#
#                           -=- Front -=-
#
# Z stepper3 ----> O                             O <---- Z stepper0
#                  | * <-- Probe3   Probe0 --> * |       X-051/Y006
#                  |    X300/Y050   X050/Y050    |
#                  |                             | <--- Y2 rail
#   Y1 rail -----> |                             |
#                  |                             |
#                  |=============================|
#                  |            ^                |
#                  |            |                |
#                  |   X rail --/                |
#                  |                             |
#                  | * <-- Probe2   Probe1 --> * |
# Z stepper2 ----> O    X300/Y300   X050/Y300    O <---- Z stepper1
# X401/Y423

#                            -=- Rear -=-
gantry_corners:
   -51,6
   401,423
points:
   50,50
   50,300
   300,300
   300,50
speed: 100
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.01
max_adjust: 10



#.................................................................................................................
[bed_mesh]
speed: 100
horizontal_move_z: 3
mesh_min: 40, 40
mesh_max: 310,310
fade_start: 0.6
fade_end: 10.0
probe_count: 5,5
mesh_pps: 2,2
algorithm: bicubic



#.................................................................................................................
[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    G28 Z



#.................................................................................................................
[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: QUAD_GANTRY_LEVEL_ORIGINAL
description: Levels the four Z-axis gantry corners
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %} ; Home if not already homed
        G28
    {% endif %} 
    STATUS_LEVELING
    SET_NOZZLE_LEDS_ON
    QUAD_GANTRY_LEVEL_ORIGINAL
    STATUS_READY
    SET_NOZZLE_LEDS_ON



#.................................................................................................................
[gcode_macro G3201]
description: Clears bed-mesh and performs G28, QGL, G28-Z, Probes Center, and applies bed-mesh
gcode:
    {% set MeshCenter = printer["gcode_macro _ADAPTIVE_MESH_VARIABLES"].mesh_center | string %}
    {% set ZSpeed = printer["gcode_macro globalvariables"].zprobespeed|float %}
    {% set ZSamples = printer["gcode_macro globalvariables"].zprobesamples|int %}
    {% set ZTolerance = printer["gcode_macro globalvariables"].zprobetolerance|float %}
    {% set ZRetract = printer["gcode_macro globalvariables"].zproberetract|float %}
    {% set S_Retries = printer.configfile.config["probe"]["samples_tolerance_retries"]|int %}
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL_ORIGINAL
    G0 Z10 F3600
    G28 Z
    STATUS_CALIBRATING_Z
    PROBE samples_result=median samples={ZSamples} speed={ZSpeed} samples_tolerance={ZTolerance} samples_tolerance_retries={S_Retries} sample_retract_dist={ZRetract}
    _CHECK_PROBE3201

[gcode_macro _CHECK_PROBE3201]
gcode:
    {% set PASS = printer.probe.last_z_result %}
    {% set ZP_CAL = printer.configfile.config["probe"]["z_offset"]|float %}
    {% set Z_POS = printer.toolhead.position.z|float %}
    {% set Z_DIFFERENCE = PASS - ZP_CAL|float %}
    {% set NEW_CURRENT_Z = (Z_POS - Z_DIFFERENCE) %}
    M118 Current Probing is: {PASS}
    M118 Z-Probe Offset is: {ZP_CAL}
    M118 Difference: {Z_DIFFERENCE}
    M118 Setting current Z_Height of {Z_POS} to {NEW_CURRENT_Z}
    SET_KINEMATIC_POSITION Z={NEW_CURRENT_Z}
    G4 P100
    G0 Z5 F500
    G4 P1000
    M118 Performing ADAPTIVE Mesh.
    ADAPTIVE_BED_MESH
    STATUS_READY
    SET_NOZZLE_LEDS_ON



#.................................................................................................................
[stepper_x]
# B Stepper - Left, Connected to MOTOR_0, Endstop connected to DIAG_0
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: 0
position_endstop: 350
position_max: 350
homing_speed: 30   # safest is rotation_distance of 40 / 2 = 20
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_x]
uart_pin: PC4
interpolate: false
run_current: 0.4
sense_resistor: 0.105
stealthchop_threshold: 0
diag_pin: ^PG6
driver_SGTHRS: 80 # 255 is most sensitive value, 0 is least sensitive



#.................................................................................................................
[stepper_y]
# A Stepper - Right, Connected to MOTOR_1, Endstop connected to DIAG_1
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: 0
position_endstop: 350
position_max: 354
homing_speed: 30   # safest is rotation_distance of 40 / 2 = 20
homing_retract_dist: 0
homing_positive_dir: true

[tmc2209 stepper_y]
uart_pin: PD11
interpolate: false
run_current: 0.4
sense_resistor: 0.110
stealthchop_threshold: 0
diag_pin: ^PG9
driver_SGTHRS: 80  # 255 is most sensitive value, 0 is least sensitive 



#.................................................................................................................
[stepper_z]
# Z0 Stepper - Front Left, Connected to MOTOR_2, Endstop connected to DIAG_2
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
endstop_pin: probe:z_virtual_endstop
position_max: 301
position_min: -3
homing_speed: 10
second_homing_speed: 5
homing_retract_dist: 5

[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 0.3
sense_resistor: 0.110
stealthchop_threshold: 0


[stepper_z1]
# Z1 Stepper - Rear Left, Connected to MOTOR_3
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 0.3
sense_resistor: 0.110
stealthchop_threshold: 0


[stepper_z2]
# Z2 Stepper - Rear Right, Connected to MOTOR_4
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 0.3
sense_resistor: 0.110
stealthchop_threshold: 0


[stepper_z3]
# Z3 Stepper - Front Right, Connected to MOTOR_5
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 0.3
sense_resistor: 0.110
stealthchop_threshold: 0
