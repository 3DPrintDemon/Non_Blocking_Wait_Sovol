[gcode_macro test_variables]
variable_previous_speed: 0.4
variable_bedfanmin: 0.2
variable_bedfanmax: 0.6
variable_last_temp: 33
variable_normal_speed: 0.25
gcode:



[gcode_macro test]
gcode:

    # Test the macro by typing the following in the console:
    #       test temp=48

    # Set initial conditions
    {% set variables = printer['gcode_macro test_variables'] %}
    {% set previous_speed = variables.previous_speed|float %}
    {% set bedfanmin = 0.2|float %}
    {% set bedfanmax = 0.6|float %}
    {% set temperature = params.TEMP|float %}
    {% set target = 50 %}
    {% set normal_speed = variables.normal_speed|float %} %}
    {% set high_threshold = 1.08 %}
    {% set low_threshold = 0.93 %}
    {% set last_temp = variables.last_temp|float %}
    ;{% set SAVE = SET_GCODE_VARIABLE MACRO=test_variables VARIABLE %}
    
    {% if previous_speed == bedfanmax and temperature > (target * low_threshold) %} {% set previous_speed = normal_speed %} {% endif %}

    # Determines temp/target error percentage, adjusts fan speed by that percentage
    {% set fan_speed = (previous_speed * (1 - ((temperature - target) / target) / 2))|float %}

    # This should slow the ramping up of temperature. If last_temp is higher than the current temp, leave fan speed as it was.
    {% if temperature > last_temp and temperature < target %} {% set fan_speed = previous_speed %} {% endif %}

    # This should slow the ramping down of temperature. If last_temp is lower than the current temp, leave fan speed as it was.
    {% if temperature < last_temp and temperature > target %} {% set fan_speed = previous_speed %} {% endif %}

    # THRESHOLD Override: If the temperature is above (target * high_threshold) set min speed
    {% set fan_speed = bedfanmin if temperature > (target * high_threshold) else fan_speed %}

    # THRESHOLD Override: If the temperature is below (target * low_threshold) set to max speed
    {% set fan_speed = bedfanmax if temperature < (target * low_threshold) else fan_speed %}

    # This is where fan speed change would happen.
    {% set fan_speed = [([variables.bedfanmax, fan_speed]|min),0.1]|max %}
    m118 Previous speed was: {previous_speed}, Target temp is: {target}, Current temp is: {temperature}, New speed is: {fan_speed}

    # Here, we take the current fan speed and use it to re-average the normal speed. If the fan speed is the min or max speed, the re-averaging will be skipped.
    {% if fan_speed == bedfanmin or fan_speed == bedfanmax %}
        M118 Skipping re-averaging normal_speed as limits are set.
    {% else %}
        {% set new_normal_speed = ( (normal_speed + fan_speed) / 2 ) %}
        M118 Re-averaging normal_speed set to {new_normal_speed}.
        SET_GCODE_VARIABLE MACRO=test_variables VARIABLE=normal_speed VALUE={new_normal_speed}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=test_variables VARIABLE=previous_speed VALUE={fan_speed}
    SET_GCODE_VARIABLE MACRO=test_variables VARIABLE=last_temp VALUE={temperature}

