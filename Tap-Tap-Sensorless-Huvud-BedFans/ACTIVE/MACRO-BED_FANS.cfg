# Modified version of https://github.com/VoronDesign/VoronUsers/tree/master/printer_mods/Ellis/Bed_Fans

[gcode_macro _BEDFANVARS]
variable_bedfanenclosuretarget: 999                                                                   ; Enclosure temp to switch to medium speed fans
variable_bedfantripon: 999                                                                            ; Lowest bed temperature target that will enable the bed fans
variable_bedfanreached: 0                                                                             ; Flag to indicate enclosure temp has reached target
variable_bedreached: 0                                                                                ; Flag to indicate bed temp has reached target
variable_bedfansenabled: 1                                                                            ; Flag to indicate fans are enabled
variable_last_error: 0                                                                                ; Last PID error
variable_last_integral: 0                                                                             ; Last PID integral
variable_integral_enabled: 1                                                                          ; Flag to indicate PID integral is enabled
gcode:
    M117 Happy printing.


[gcode_macro BEDFANSOFF]
gcode:
    SET_FAN_SPEED FAN=BedFan SPEED=0                                                                  ; Turn off bed fans
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfansenabled VALUE=0                              ; Set bed fans enabled flag to 0
    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0                                                     ; Cancel bed fan loop if it's running

[gcode_macro BEDFANSFAST]
gcode:
    {% set bedfanmaxlimit = printer["gcode_macro globalvariables"].bedfansmax|float %}                ; Set bed fan max limit speed
    SET_FAN_SPEED FAN=BedFan SPEED={bedfanmaxlimit} 

[gcode_macro BEDFANSSLOW]
gcode:
    {% set bedfanminlimit = printer["gcode_macro globalvariables"].bedfansmin|float %}                ; Set bed fan min limit speed
    SET_FAN_SPEED FAN=BedFan SPEED={bedfanminlimit} 

[gcode_macro BEDFANSON]
gcode:
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfansenabled VALUE=1                              ; Set bed fans enabled flag to 1
    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5                                                     ; Start bed fan loop

[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
    BEDFANSOFF                                                                                        ; Turn off bed fans
    _TURN_OFF_HEATERS                                                                                 ; Turn off heaters



[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
    {% set HEATER = params.HEATER|default("None") %}                                                  ; Heater to set temperature for
    {% set TARGET = params.TARGET|default(0)|int %}                                                   ; Target temperature
    {% set bedfantripon = printer["gcode_macro _BEDFANVARS"].bedfantripon|int %}                      ; Bed temp threshold for bed fans 

    {% if HEATER|lower == "heater_bed" %}                                                             ; If heater is bed
        M99140 S{ TARGET }                                                                            ; Set bed temperature
    {% else %}                                                                                        ; If heater is not bed
        _SET_HEATER_TEMPERATURE {rawparams}                                                           ; Set heater temperature
    {% endif %}                                                                                       ; End if heater is bed

    {% if HEATER|lower == "heater_bed" %}                                                             ; If heater is bed
        {% if TARGET >= bedfantripon %}                                                               ; If the bed's target temp is above the bed fan trip threshold
            BEDFANSSLOW                                                                               ; Set bed fans to slow speed as bed is heating
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1                                             ; Start bed fan loop
        {% else %}                                                                                    ; If the bed's target temp is below the bed fan trip threshold
            BEDFANSOFF                                                                                ; Turn off bed fans
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0                                             ; Cancel bed fan loop if it's running
        {% endif %}                                                                                   ; End if the bed's target temp is above the bed fan trip threshold
    {% endif %}                                                                                       ; End if heater is bed



[gcode_macro M190]
rename_existing: M99190
gcode:
    {% set S = params.S|int %}                                                                        ; Bed target temperature
    {% set bedfantripon = printer["gcode_macro _BEDFANVARS"].bedfantripon|int %}                      ; Grab the bed fan trip threshold

    {% if S >= bedfantripon %}                                                                        ; If the bed target temp is above the bed fan trip threshold
        BEDFANSSLOW                                                                                   ; Set bed fans to low speed fans while the bed is heating
    {% else %}                                                                                        ; If the bed target temp is below the bed fan trip threshold
        BEDFANSOFF                                                                                    ; Turn off bed fans
    {% endif %}                                                                                       ; End if the bed target temp is above the bed fan trip threshold

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}                                   ; Set bed target temp
  
    {% if S != 0 %}                                                                                   ; If the bed target temp is not 0
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={ S|int } MAXIMUM={ S|int + 5 }                    ; Wait for bed temp within 5 degrees
    {% endif %}                                                                                       ; End if bed target temp is not 0

    {% if S >= bedfantripon %}                                                                        ; Now that bed is at temperature, If the bed target temp is above the bed fan trip threshold
        BEDFANSFAST                                                                                   ; Set bed fans to fast speed
        UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1                                                 ; Start bed fan loop
    {% endif %}                                                                                       ; End if the bed target temp is above the bed fan trip threshold



[gcode_macro M140]
rename_existing: M99140
gcode:
    {% set S = params.S|float %}                                                                      ; Bed target temperature
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}                                               ; Set bed target temp



[delayed_gcode bedfanloop]
gcode:
    {% set bedfantripon = printer["gcode_macro _BEDFANVARS"].bedfantripon|int %}                       ; Grab the bed fan trip threshold
    {% set target_temperature = printer["gcode_macro _BEDFANVARS"].bedfanenclosuretarget|int %}        ; Get the enclosure target temp
    {% set current_temperature = printer["temperature_sensor enclosure"].temperature|int %}            ; Get the enclosure temp
    {% set error = target_temperature - current_temperature %}                                         ; Calculate temperature error
    {% set last_error = printer["gcode_macro _BEDFANVARS"].last_error|int %}                           ; Grab previous PID error
    {% set last_integral = printer["gcode_macro _BEDFANVARS"].last_integral|int %}                     ; Grab previous PID integral
    {% set integral_enabled = printer["gcode_macro _BEDFANVARS"].integral_enabled|int %}               ; Grab integral_enabled flag  
    {% set enclosuresoak = printer["gcode_macro globalvariables"].enclosuresoakminutes|int|max(1) %}   ; Get the enclosure soak minutes, minumum 1 minute
    {% set bedfanreached = printer["gcode_macro _BEDFANVARS"].bedfanreached|int %}                     ; Get the enclosure reached temperature flag
    {% set bedreached = printer["gcode_macro _BEDFANVARS"].bedreached|int %}                           ; Get the bed reached temperature flag
    {% set bedfansenabled = printer["gcode_macro _BEDFANVARS"].bedfansenabled|int %}                   ; Get the enclosure enabled flag
    {% set bedtarget = printer.heater_bed.target|int %}                                                ; Get the heater_bed target
    {% set currentbedtemp = printer.heater_bed.temperature|int %}                                      ; Get the current bed temp
    {% set fan_max_speed = printer["gcode_macro globalvariables"].bedfansmax|float %}                  ; Set bed fan max limit speed
    {% set fan_min_speed = printer["gcode_macro globalvariables"].bedfansmin|float %}                  ; Set bed fan min limit speed
    {% set looprate = 2 %}                                                                             ; Repeat this PID loop every X seconds
    {% set kp = 0.5 %}
    {% set ki = 0.2 %}
    {% set kd = 0.1 %}


    {% if bedfansenabled and bedtarget >= bedfantripon %}                                              ; If the bed target temp is above the bed fan trip threshold and fans are enabled
        {% if currentbedtemp >= (bedtarget|int - 1) or bedreached %}                                   ; If the bed temp is within 1 degrees of the target temperature, or has already done so this print
            SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedreached VALUE=1                           ; Set the bed reached temperature flag to 1 to prevent going to slow on temp drifts

            {% set proportional = kp * error %}
            {% if integral_enabled %}
                {% set integral = last_integral + (ki * error) %}
                {% set integral = integral_max if integral > integral_max else integral %}
                {% set integral = integral_min if integral < integral_min else integral %}
            {% else %}
                {% set integral = last_integral %}
            {% endif %}
            {% set derivative = kd * (error - last_error) %}

            {% set fan_speed = proportional + integral + derivative %}

            {% if fan_speed < fan_min_speed %}
                {% set fan_speed = fan_min_speed %}
                {% set integral_enabled = false %}
            {% elif fan_speed > fan_max_speed %}
                {% set fan_speed = fan_max_speed %}
                {% set integral_enabled = false %}
            {% else %}
                # set integral_enabled = true
                SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=integral_enabled VALUE=1
            {% endif %}

            SET_FAN_SPEED FAN=BedFan SPEED={fan_speed}

            # Store the integral and error for next loop
            SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=last_error VALUE={error}
            SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=last_integral VALUE={integral}

            # If the enclosure temperature equals the target temperature and the enclosure reached temperature flag is 0, the flag is set to 1, and proceed with the enclosure soak cycle.
            {% if not bedfanreached and current_temperature == target_temperature %}
                SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfanreached VALUE=1
                {% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
                {% set count = (enclosuresoak * 60) / duration %} 
                SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=True
                SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count}
                UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration} 
            {% endif %}


        {% else %}                                                                                     ; If the bed temp is not within 1 degrees of the target temperature
            SET_FAN_SPEED FAN=BedFan SPEED={bedfanminlimit}                                            ; Set bed fans to slow speed while bed is heating
        {% endif %}                                                                                    ; End if the bed temp is within 1 degrees of the target temperature
    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION={looprate}                                             ; Restart bed fan loop
    {% endif %}                                                                                        ; End if the bed target temp is above the bed fan trip threshold