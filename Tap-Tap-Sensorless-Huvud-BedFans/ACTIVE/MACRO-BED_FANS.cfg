# A Very Modified version of https://github.com/VoronDesign/VoronUsers/tree/master/printer_mods/Ellis/Bed_Fans

[gcode_macro _BEDFANVARS]
variable_bedfanenclosuretarget: 999                                                                   ; Enclosure temp to switch to medium speed fans
variable_bedfantripon: 999                                                                            ; Lowest bed temperature target that will enable the bed fans
variable_bedfanreached: 0                                                                             ; Flag to indicate enclosure temp has reached target
variable_bedreached: 0                                                                                ; Flag to indicate bed temp has reached target
variable_bedfansenabled: 1                                                                            ; Flag to indicate fans are enabled
variable_previous_temperature = 25
variable_previous_speed = 0.2
variable_average_speed = 70
variable_counter = 1
gcode:
    M117 Happy printing.


[gcode_macro BEDFANSOFF]
gcode:
    SET_FAN_SPEED FAN=BedFan SPEED=0                                                                  ; Turn off bed fans
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfansenabled VALUE=0                              ; Set bed fans enabled flag to 0
    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0                                                     ; Cancel bed fan loop if it's running

[gcode_macro BEDFANSFAST]
gcode:
    {% set fan_max = printer["gcode_macro globalvariables"].bedfansmax|float %}                       ; Set bed fan max limit speed
    SET_FAN_SPEED FAN=BedFan SPEED={fan_max} 

[gcode_macro BEDFANSSLOW]
gcode:
    {% set fan_min = printer["gcode_macro globalvariables"].bedfansmin|float %}                       ; Set bed fan min limit speed
    SET_FAN_SPEED FAN=BedFan SPEED={fan_min} 

[gcode_macro BEDFANSON]
gcode:
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfansenabled VALUE=1                              ; Set bed fans enabled flag to 1
    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1                                                     ; Start bed fan loop

[gcode_macro TURN_OFF_HEATERS]
rename_existing: _TURN_OFF_HEATERS
gcode:
    BEDFANSOFF                                                                                        ; Turn off bed fans
    _TURN_OFF_HEATERS                                                                                 ; Turn off heaters



[gcode_macro SET_HEATER_TEMPERATURE]
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
    {% set HEATER = params.HEATER|default("None") %}                                                  ; Heater to set temperature for
    {% set TARGET = params.TARGET|default(0)|int %}                                                   ; Target temperature
    {% set bedfantripon = printer["gcode_macro _BEDFANVARS"].bedfantripon|int %}                      ; Bed temp threshold for bed fans 

    {% if HEATER|lower == "heater_bed" %}                                                             ; If heater is bed
        M99140 S{ TARGET }                                                                            ; Set bed temperature
    {% else %}                                                                                        ; If heater is not bed
        _SET_HEATER_TEMPERATURE {rawparams}                                                           ; Set heater temperature
    {% endif %}                                                                                       ; End if heater is bed

    {% if HEATER|lower == "heater_bed" %}                                                             ; If heater is bed
        {% if TARGET >= bedfantripon %}                                                               ; If the bed's target temp is above the bed fan trip threshold
            BEDFANSSLOW                                                                               ; Set bed fans to slow speed as bed is heating
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1                                             ; Start bed fan loop
        {% else %}                                                                                    ; If the bed's target temp is below the bed fan trip threshold
            BEDFANSOFF                                                                                ; Turn off bed fans
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0                                             ; Cancel bed fan loop if it's running
        {% endif %}                                                                                   ; End if the bed's target temp is above the bed fan trip threshold
    {% endif %}                                                                                       ; End if heater is bed



[gcode_macro M190]
rename_existing: M99190
gcode:
    {% set S = params.S|int %}                                                                        ; Bed target temperature
    {% set bedfantripon = printer["gcode_macro _BEDFANVARS"].bedfantripon|int %}                      ; Grab the bed fan trip threshold

    {% if S >= bedfantripon %}                                                                        ; If the bed target temp is above the bed fan trip threshold
        BEDFANSSLOW                                                                                   ; Set bed fans to low speed fans while the bed is heating
    {% else %}                                                                                        ; If the bed target temp is below the bed fan trip threshold
        BEDFANSOFF                                                                                    ; Turn off bed fans
    {% endif %}                                                                                       ; End if the bed target temp is above the bed fan trip threshold

    M140 {% for p in params %}{'%s%s' % (p, params[p])}{% endfor %}                                   ; Set bed target temp
  
    {% if S != 0 %}                                                                                   ; If the bed target temp is not 0
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={ S|int } MAXIMUM={ S|int + 5 }                    ; Wait for bed temp within 5 degrees
    {% endif %}                                                                                       ; End if bed target temp is not 0

    {% if S >= bedfantripon %}                                                                        ; Now that bed is at temperature, If the bed target temp is above the bed fan trip threshold
        BEDFANSFAST                                                                                   ; Set bed fans to fast speed
        UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1                                                 ; Start bed fan loop
    {% endif %}                                                                                       ; End if the bed target temp is above the bed fan trip threshold



[gcode_macro M140]
rename_existing: M99140
gcode:
    {% set S = params.S|float %}                                                                      ; Bed target temperature
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}                                               ; Set bed target temp



[delayed_gcode bedfanloop]
gcode:
    {% set bedfantripon = printer["gcode_macro _BEDFANVARS"].bedfantripon|int %}
    {% set target_temperature = printer["gcode_macro _BEDFANVARS"].bedfanenclosuretarget|int %}
    {% set current_temperature = printer["temperature_sensor enclosure"].temperature|int %}
    {% set enclosuresoak = printer["gcode_macro globalvariables"].enclosuresoakminutes|int|max(1) %}
    {% set bedfanreached = printer["gcode_macro _BEDFANVARS"].bedfanreached|int %}
    {% set bedreached = printer["gcode_macro _BEDFANVARS"].bedreached|int %}
    {% set bedfansenabled = printer["gcode_macro _BEDFANVARS"].bedfansenabled|int %}
    {% set bedtarget = printer.heater_bed.target|int %}
    {% set currentbedtemp = printer.heater_bed.temperature|int %}
    {% set fan_min = printer["gcode_macro globalvariables"].bedfansmin|float %}

    {% if bedfansenabled and bedtarget >= bedfantripon %}
        {% if currentbedtemp >= (bedtarget|int - 1) or bedreached %}
            {% if currentbedtemp >= (bedtarget|int - 1) and not bedreached %}
            M118 Bed has reached the target of {bedtarget}, starting bed fans.
            SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedreached VALUE=1
            {% endif %}
            #-----------------------------------------------------------------------------------------
            _BEDFANCONTROL
            #------------------------------------------------------------------------------------------
            {% if not bedfanreached and current_temperature >= (target_temperature - 1) %}
                SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=bedfanreached VALUE=1
                M118 Enclosure has reached target temperature of {target_temperature}, starting enclosure soak for {enclosuresoak} minutes.
                {% set duration = printer["gcode_macro _WAIT_Variable"].duration|int %}
                {% set count = (enclosuresoak * 60) / duration %} 
                SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=waiting VALUE=True
                SET_GCODE_VARIABLE MACRO=_WAIT_Variable VARIABLE=count VALUE={count}
                UPDATE_DELAYED_GCODE ID=WAIT_Delayed DURATION={duration} 
            {% endif %}

        {% else %}
            {% set fan_speed = fan_min %}
            M118 Bed temp ({currentbedtemp}) has not yet reached bed target ({bedtarget}), staying slow speed ({fan_speed}).
        {% endif %}

    UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5
    {% endif %}

[gcode_macro _BEDFANCONTROL]
gcode:
    {% set target_temperature = printer["gcode_macro _BEDFANVARS"].bedfanenclosuretarget|int %}
    {% set current_temperature = printer["temperature_sensor enclosure"].temperature|int %}
    {% set previous_temperature = printer["gcode_macro _BEDFANVARS"].previous_temperature|int %}
    {% set previous_speed = printer["gcode_macro _BEDFANVARS"].previous_speed|float %}
    {% set counter = printer["gcode_macro _BEDFANVARS"].counter|int %}
    {% set average_speed = printer["gcode_macro _BEDFANVARS"].average_speed|int %}
    {% set fan_max = printer["gcode_macro globalvariables"].bedfansmax|int %}
    {% set fan_min = printer["gcode_macro globalvariables"].bedfansmin|int %}
    {% set drop_from_max = 70|int %}

    ; Drop from max
    {% if current_temperature < target_temperature and previous_speed == 100 %}
        {% set previous_speed = drop_from_max %}
    {% endif %}

    ; Step 1a: If the current temperature is below the target temperature or if it's equal to or lower than the previous temperature, the fan speed is increased by 5% compared to the previous speed.
    {% if current_temperature < target_temperature or current_temperature <= previous_temperature %}
        {% set fan_speed = previous_speed * 1.05 %}
        M118 Step 1 True
    {% endif %}

    ; Step 1b: If the current temperature is less than 93% of the target temperature, the fan speed is set to the maximum speed (100).
    {% if current_temperature < (target_temperature * 0.93) %}
        {% set fan_speed = 100 %}
        M118 Step 1b Override to 100% True
    {% endif %}

    ; Step 2: If the current temperature is above 99% of the target temperature, the fan speed is reduced to 95% of the previous speed to help avoid overshooting the target.
    {% if current_temperature > (target_temperature * 0.99) %}
        {% set fan_speed = (previous_speed * 0.95) %}
        M118 Step 2 True
    {% endif %}

    ; Step 2b: If the current temperature is above 102% of the target temperature, the fan speed is further reduced to 90% of the previous speed.
    {% if current_temperature > (target_temperature * 1.02) %}
        {% set fan_speed = (previous_speed * 0.9) %}
        M118 Step 2b True
    {% endif %}

    ; Speed safety
    {% if fan_speed < 1 %} {% set fan_speed = 1 %} {% endif %}
    {% if fan_speed > 100 %} {% set fan_speed = 99 %} {% endif %}

    ; Calculate rough fan_speed average and loop counter
    {% set average_speed = (average_speed + fan_speed) / 2 %}
    {% set counter = counter + 1 %}
    M118 Average (running) fan speed is {average_speed}, with {counter} data points.
    
    ; The fan speed is then scaled from the range 0 to 100 to the range defined by fan_min and fan_max (0.2 to 0.6) using a linear mapping formula.
    SET_FAN_SPEED FAN=BedFan SPEED={ ( (fan_speed/ 100) * (fan_max - fan_min) + fan_min ) }
    M118 Set fan % at {fan_speed} / previous was {previous_speed} at enclosure temperature of {current_temperature} / previous was {previous_temperature}

    ; The fan speed and other variables are updated, and the code is set to run again after a delay of 5 seconds.
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=previous_temperature VALUE={current_temperature}
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=previous_speed VALUE={fan_speed}
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=counter VALUE={counter}
    SET_GCODE_VARIABLE MACRO=_BEDFANVARS VARIABLE=average_speed VALUE={average_speed}
